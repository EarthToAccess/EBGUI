encui= "aWYgbm90KGdhbWU6SXNMb2FkZWQoKSkgdGhlbgoJZ2FtZS5Mb2FkZWQ6V2FpdCgpCmVuZAoKaWYgKGdhbWUuQ29yZUd1aTpGaW5kRmlyc3RDaGlsZCgidmlkdWkiKSkgdGhlbgoJZ2FtZS5Db3JlR3VpLnZpZHVpOkRlc3Ryb3koKQplbmQKCmxvY2FsIHBsYXllcnMgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQpsb2NhbCBwbGF5ZXIgPSBwbGF5ZXJzLkxvY2FsUGxheWVyCmxvY2FsIElEID0gcGxheWVyLlVzZXJJZApsb2NhbCBpc0Jsb2NrZWQgPSBmYWxzZQpsb2NhbCBpc01hc3RlciA9IGZhbHNlCgpsb2NhbCBibG9ja2xpc3QgPSB7fQpsb2NhbCBtYXN0ZXJsaXN0ID0gewoJMzI1NzMzMzQsCn0KCmZvciBpLHYgaW4gcGFpcnMoYmxvY2tsaXN0KSBkbwogICAgaWYgdiA9PSBJRCB0aGVuCiAgICAgICAgaXNCbG9ja2VkID0gdHJ1ZQogICAgICAgIGJyZWFrCiAgICBlbmQKZW5kCgpmb3IgaSx2IGluIHBhaXJzKG1hc3Rlcmxpc3QpIGRvCiAgICBpZiB2ID09IElEIHRoZW4KICAgICAgICBpc01hc3RlciA9IHRydWUKICAgICAgICBicmVhawogICAgZW5kCmVuZAoKaWYgaXNCbG9ja2VkIHRoZW4KICAgIHdhcm4oIj09PT09PT09PT09PT09PT09PT09PT09W1sgQVRURU5USU9OIF1dPT09PT09PT09PT09PT09PT09PT09PT0iKQogICAgd2FybigifCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCIpCiAgICB3YXJuKCJ8ICAgICAgICAgICAgICBUaGlzIGFjY291bnQgaGFzIGJlZW4gYmxvY2tlZC4gICAgICAgICAgICAgICB8IikKICAgIHdhcm4oInwgICAgUGxlYXNlIHZpc2l0IHRoZSBFQkd1aSBEaXNjb3JkIGZvciBtb3JlIGluZm9ybWF0aW9uLiAgIHwiKQogICAgd2FybigifCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCIpCiAgICB3YXJuKCI9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IikKZWxzZQoJbG9jYWwgdmVyTnVtID0gInYxLjQiCglsb2NhbCBkdW1iUXVvdGVzID0gewoJCSJKZWV6LCB3aGVuJ2QgaXQgZ2V0IHNvIGhvdCBpbiBoZXJlPyIsCgkJIklzIGl0IGp1c3QgbWUgb3IgaXMgdGhhdCAqdG9vKiBibHVlPyIsCgkJIkxpa2UgdGFraW5nIGNhbmR5IGZyb20gYSBiYWJ5LiIsCgkJIkRlZXogbnV0cyBhcmUgdG9vIHNxdWFyZSEiLAoJCSJBbHNvIHRyeSBNaW5lY3JhZnQhIiwKCQkiQWxzbyB0cnkgVGVycmFyaWEhIiwKCQkiTWVoLCBJIGxpa2VkIFJpc2sgb2YgUmFpbiAyIGJldHRlci4iLAoJCSJZb3UgbmVlZCBhIGZhaXJseSBoaWdoIElRIHRvIHVuZGVyc3RhbmQgVmlkVUkuIiwKCQkiSmFrZSwgZnJvbSBTdGF0ZSBGYXJtPyEiLAoJCSJXaGF0IHdvdWxkICp5b3UqIGRvIGZvciBhIEtsb25kaWtlIGJhcj8iLAoJCSJOb3cgd2l0aCAxMDAlIG1vcmUgR29sZCEiLAoJCSJNYWRlIGluIEx1YSEiLAoJCSJJRiAlRVJST1JMRVZFTCUgRVFVIDEgR09UTzpFT0YiLAoJCSJicnVoIG5lcmYgc29sYXIgYWxyZWFkeSIsCgkJIkJlY2F1c2UgdGhlIGRldnMgd29uJ3QgZG8gaXQuIiwKCQkiUGV0aXRpb24gWU9VUiBsb2NhbCBkZXZlbG9wZXIgZm9yIG1vcmUgdXBkYXRlcyEiLAoJCSJ3aHkgYXJlIHlvdSBidXlpbmcgY2xvdGhlcyBhdCB0aGUgc291cCBzdG9yZSIsCgkJIkkganVzdCB3YW5uYSBiZSBhIG5vcm1hbCBHVUkgd2l0aCBub3JtYWwga25lZXMuIiwKCQkiSSBsaWtlIGdyYWRpZW50cy4gQSBsb3QuIiwKCQkiOigpezp8OiZ9OzoiCgl9CgogICAgd2FybihbWyAgICAgICAgICAKICMgICAgICMgICAgICAgICAgICAgIyAgICAgIyAgIyMjIAogIyAgICAgIyAgICAgICAgICAgICAjICAgICAjICAgIyAgCiAjICAgICAjICAjICAjIyMjIyAgICMgICAgICMgICAjCiAjICAgICAjICAjICAjICAgICMgICMgICAgICMgICAjICAKICAjICAgIyAgICMgICMgICAgIyAgIyAgICAgIyAgICMgIAogICAjICMgICAgIyAgIyAgICAjICAjICAgICAjICAgIyAgCiAgICAjICAgICAjICAjIyMjIyAgICAjIyMjIyAgICMjIyBdXSAuLiB2ZXJOdW0pCglwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKCXByaW50KGR1bWJRdW90ZXNbbWF0aC5yYW5kb20oMSwyMCldKQoJcHJpbnQoIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIpCgl3YXJuKCJXZWxjb21lIHRvIFZpZFVJLCAiIC4uIHBsYXllci5OYW1lIC4uICIhIikKCXdhcm4oIllvdSdyZSBvbiB0aGUgQ2FuYXJ5IGJyYW5jaCBvZiBWaWRVSSIpCgl3YXJuKCJRdWVzdGlvbnMgb3IgY29uY2VybnM/IExldCB1cyBrbm93IGluIHRoZSBEaXNjb3JkLCIpCgl3YXJuKCJvciBlbWFpbCBFYXJ0aCBoaW1zZWxmIGF0IGVhcnRodG9hY2Nlc3NAZ21haWwuY29tISIpCgl3YWl0KDAuNSkKCQoJaWYgaXNNYXN0ZXIgdGhlbgoJCXdhcm4oIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIpICAgCgkJd2FybigiTG9hZGVkIGluIHVzaW5nIHRoZSBNYXN0ZXIgTGlzdCEgT3ZlcnJpZGluZyBhY2Nlc3MgZ2l2ZW4uIikKCQl3YXJuKCItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iKQoJZW5kCgoJLS0gR1VJIEluc3RhbmNlcywgRXZlbnRzIGFuZCBGdW5jdGlvbnMKCglsb2NhbCB2aWR1aSA9IEluc3RhbmNlLm5ldygiU2NyZWVuR3VpIikKCXZpZHVpLk5hbWUgPSAidmlkdWkiCgl2aWR1aS5QYXJlbnQgPSBnYW1lOldhaXRGb3JDaGlsZCgiQ29yZUd1aSIpCgoJZ2FtZS5Db3JlR3VpLkNoaWxkUmVtb3ZlZDpjb25uZWN0KGZ1bmN0aW9uKGNoaWxkKQoJCWlmIGNoaWxkLk5hbWUgPT0gInZpZHVpIiB0aGVuCgkJCWNsb3NlZGZvcmV2ZXIgPSB0cnVlCgkJCWJ1dHRvbnNvcGVuZWQgPSBmYWxzZQoJCQljb21tYW5kc29wZW5lZCA9IGZhbHNlCgkJCWJ1dHRvbnNkZWJvdW5jZSA9IHRydWUKCQkJY29tbWFuZGRlYm91bmNlID0gdHJ1ZQoJCQl0ZXJtaW5hdGV1aXMgPSB0cnVlCgkJCVVJUyA9IG5pbAoJCQl2aWV3aW5nID0gbmlsCgkJCUNoYW5nZVZpZXdFbmFibGVkID0gbmlsCgkJCUVTUEVuYWJsZWQgPSBuaWwKCQllbmQKCWVuZCkKCglsb2NhbCBwbGF5ZXJsaXN0ID0ge30KCglsb2NhbCBIQiA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLkhlYXJ0YmVhdAoKCWxvY2FsIG1vdXNlID0gcGxheWVyOkdldE1vdXNlKCkKCglsb2NhbCBib3JkZXJzID0ge30KCglsb2NhbCBidXR0b25zbWFpbiA9IEluc3RhbmNlLm5ldygiRnJhbWUiKQoJYnV0dG9uc21haW4uTmFtZSA9ICJidXR0b25zbWFpbiIKCWJ1dHRvbnNtYWluLlBvc2l0aW9uID0gVURpbTIubmV3KDEuMjUsIDAsIDAuNjUsIDApCglidXR0b25zbWFpbi5TaXplID0gVURpbTIubmV3KDAuNCwgMCwgMC4yMjUsIDApCgl0YWJsZS5pbnNlcnQoYm9yZGVycywgYnV0dG9uc21haW4pCgoJYnV0dG9uc2RlYm91bmNlID0gZmFsc2UKCWJ1dHRvbnNvcGVuZWQgPSB0cnVlCgoJbG9jYWwgY29tbWFuZHNtYWluID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCgljb21tYW5kc21haW4uTmFtZSA9ICJjb21tYW5kc21haW4iCgljb21tYW5kc21haW4uUG9zaXRpb24gPSBVRGltMi5uZXcoMS4yNSwgMCwgMC40NSwgMCkKCWNvbW1hbmRzbWFpbi5TaXplID0gVURpbTIubmV3KDAuMywgMCwgMC4xNzUsIDApCgl0YWJsZS5pbnNlcnQoYm9yZGVycywgY29tbWFuZHNtYWluKQoKCWNvbW1hbmRkZWJvdW5jZSA9IGZhbHNlCgljb21tYW5kc29wZW5lZCA9IHRydWUKCgljbG9zZWRmb3JldmVyID0gZmFsc2UKCglsb2NhbCBmcmFtZXMgPSB7fQoKCS0tIEZyYW1lIGZvciBhcm91bmQgdGhlIGJ1dHRvbnMuCglsb2NhbCBidXR0b25zZnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIikKCWJ1dHRvbnNmcmFtZS5OYW1lID0gImJ1dHRvbnNmcmFtZSIKCWJ1dHRvbnNmcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoNzYsIDAsIDEzNCkKCWJ1dHRvbnNmcmFtZS5Cb3JkZXJDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxMjgsIDEyOCwgMTI4KQoJYnV0dG9uc2ZyYW1lLkJvcmRlclNpemVQaXhlbCA9IDIKCWJ1dHRvbnNmcmFtZS5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMC41KQoJYnV0dG9uc2ZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC41LCAwKQoJYnV0dG9uc2ZyYW1lLlNpemUgPSBVRGltMi5uZXcoMC45LCAwLCAwLjg1LCAwKQoJdGFibGUuaW5zZXJ0KGZyYW1lcywgYnV0dG9uc2ZyYW1lKQoJYnV0dG9uc2ZyYW1lLlBhcmVudCA9IGJ1dHRvbnNtYWluCgoJLS0gRnJhbWUgZm9yIGFyb3VuZCB0aGUgY29tbWFuZCBib3guCglsb2NhbCBjb21tYW5kc2ZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCgljb21tYW5kc2ZyYW1lLk5hbWUgPSAiY29tbWFuZHNmcmFtZSIKCWNvbW1hbmRzZnJhbWUuQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygwLjUsIDAuNSkKCWNvbW1hbmRzZnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDc2LCAwLCAxMzQpCgljb21tYW5kc2ZyYW1lLkJvcmRlckNvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDEyOCwgMTI4LCAxMjgpCgljb21tYW5kc2ZyYW1lLkJvcmRlclNpemVQaXhlbCA9IDIKCWNvbW1hbmRzZnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAwLCAwLjUsIDApCgljb21tYW5kc2ZyYW1lLlNpemUgPSBVRGltMi5uZXcoMC45LCAwLCAwLjg1LCAwKQoJdGFibGUuaW5zZXJ0KGZyYW1lcywgY29tbWFuZHNmcmFtZSkKCWNvbW1hbmRzZnJhbWUuUGFyZW50ID0gY29tbWFuZHNtYWluCgoJLS0gQ29tbWFuZCBib3guIFRoaXMgaXMgd2hlcmUgdXNlcnMgdHlwZSBpbiBjb21tYW5kcyBhbmQgdGFyZ2V0cy4KCWxvY2FsIGNvbW1hbmRCb3ggPSBJbnN0YW5jZS5uZXcoIlRleHRCb3giKQoJY29tbWFuZEJveC5OYW1lID0gImNvbW1hbmRCb3giCgljb21tYW5kQm94LkFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpCgljb21tYW5kQm94LkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNSwgNDAsIDQwKQoJY29tbWFuZEJveC5Cb3JkZXJDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxMjgsIDEyOCwgMTI4KQoJY29tbWFuZEJveC5Cb3JkZXJTaXplUGl4ZWwgPSAyCgljb21tYW5kQm94LlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC4zLCAwKQoJY29tbWFuZEJveC5TaXplID0gVURpbTIubmV3KDAuODUsIDAsIDAuMjAsIDApCgljb21tYW5kQm94LkZvbnQgPSBFbnVtLkZvbnQuSm9zZWZpblNhbnMKCWNvbW1hbmRCb3guVGV4dCA9ICIiCgljb21tYW5kQm94LlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTEsIDI1MSwgMjU1KQoJY29tbWFuZEJveC5UZXh0U2NhbGVkID0gdHJ1ZQoJY29tbWFuZEJveC5UZXh0U2l6ZSA9IDE0LjAwMAoJY29tbWFuZEJveC5UZXh0V3JhcHBlZCA9IHRydWUKCWNvbW1hbmRCb3guQ2xlYXJUZXh0T25Gb2N1cyA9IGZhbHNlCgljb21tYW5kQm94LlBhcmVudCA9IGNvbW1hbmRzZnJhbWUKCglsb2NhbCBsYWJlbHMgPSB7fQoKCS0tIFRoZSBvdXRwdXQgZm9yIHRoZSBjb21tYW5kIGJveCwgQUtBIHRoZSB3aGl0ZSB0ZXh0IGJlbG93IHRoYXQgbGlzdHMgeW91ciB0YXJnZXQuCglsb2NhbCBjb21tYW5kQm94T3V0cHV0ID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiKQoJY29tbWFuZEJveE91dHB1dC5OYW1lID0gImNvbW1hbmRCb3hPdXRwdXQiCgljb21tYW5kQm94T3V0cHV0LkFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpCgljb21tYW5kQm94T3V0cHV0LkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQoJY29tbWFuZEJveE91dHB1dC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMS4wMDAKCWNvbW1hbmRCb3hPdXRwdXQuQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTI4LCAxMjgsIDEyOCkKCWNvbW1hbmRCb3hPdXRwdXQuQm9yZGVyU2l6ZVBpeGVsID0gMAoJY29tbWFuZEJveE91dHB1dC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNiwgMCkKCWNvbW1hbmRCb3hPdXRwdXQuU2l6ZSA9IFVEaW0yLm5ldygwLjksIDAsIDAuMiwgMCkKCWNvbW1hbmRCb3hPdXRwdXQuRm9udCA9IEVudW0uRm9udC5Kb3NlZmluU2FucwoJY29tbWFuZEJveE91dHB1dC5UZXh0ID0gIlBsYXllciBsaXN0IHwgKE5vbmUpIgoJY29tbWFuZEJveE91dHB1dC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjUxLCAyNTEsIDI1NSkKCWNvbW1hbmRCb3hPdXRwdXQuVGV4dFNjYWxlZCA9IHRydWUKCWNvbW1hbmRCb3hPdXRwdXQuVGV4dFNpemUgPSAxNC4wMDAKCWNvbW1hbmRCb3hPdXRwdXQuVGV4dFdyYXBwZWQgPSB0cnVlCgl0YWJsZS5pbnNlcnQobGFiZWxzLCBjb21tYW5kQm94T3V0cHV0KQoJY29tbWFuZEJveE91dHB1dC5QYXJlbnQgPSBjb21tYW5kc2ZyYW1lCgoJLS0gVGhlIGluZm9ybWF0aW9uIGFib3ZlIHRoZSBidXR0b25zLCBlLmcuIHVzZXIncyBuYW1lLCBjaGFubmVsCglsb2NhbCBEZXRhaWxzID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiKQoJRGV0YWlscy5OYW1lID0gIkRldGFpbHMiCglEZXRhaWxzLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQoJRGV0YWlscy5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMS4wMDAKCURldGFpbHMuQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTI4LCAxMjgsIDEyOCkKCURldGFpbHMuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMC4wMTUsIDApCglEZXRhaWxzLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMC4xNSwgMCkKCURldGFpbHMuRm9udCA9IEVudW0uRm9udC5Kb3NlZmluU2FucwoJRGV0YWlscy5UZXh0ID0gcGxheWVyLk5hbWUgLi4gIiB8IFZpZFVJIHwgQ2FuYXJ5IgoJRGV0YWlscy5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjUxLCAyNTEsIDI1NSkKCURldGFpbHMuVGV4dFNjYWxlZCA9IHRydWUKCURldGFpbHMuWkluZGV4ID0gNQoJRGV0YWlscy5UZXh0U2l6ZSA9IDE0LjAwMAoJRGV0YWlscy5UZXh0V3JhcHBlZCA9IHRydWUKCXRhYmxlLmluc2VydChsYWJlbHMsIERldGFpbHMpCglEZXRhaWxzLlBhcmVudCA9IGJ1dHRvbnNmcmFtZQoKCS0tICJDbG9zZSB0aGlzIEdVSSIgZm9yIHRoZSBjb21tYW5kIGJveC4KCWxvY2FsIERldGFpbHMyID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiKQoJRGV0YWlsczIuTmFtZSA9ICJEZXRhaWxzMiIKCURldGFpbHMyLkFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMC41LCAwLjUpCglEZXRhaWxzMi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKCURldGFpbHMyLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLjAwMAoJRGV0YWlsczIuQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTI4LCAxMjgsIDEyOCkKCURldGFpbHMyLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMCwgMC45LCAwKQoJRGV0YWlsczIuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLjE1LCAwKQoJRGV0YWlsczIuRm9udCA9IEVudW0uRm9udC5Kb3NlZmluU2FucwoJRGV0YWlsczIuVGV4dCA9ICJQcmVzcyBdIHRvIG9wZW4gYW5kIGNsb3NlIHRoaXMgR1VJLiIKCURldGFpbHMyLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTEsIDI1MSwgMjU1KQoJRGV0YWlsczIuVGV4dFNjYWxlZCA9IHRydWUKCURldGFpbHMyLlRleHRTaXplID0gMTQuMDAwCglEZXRhaWxzMi5UZXh0V3JhcHBlZCA9IHRydWUKCXRhYmxlLmluc2VydChsYWJlbHMsIERldGFpbHMyKQoJRGV0YWlsczIuUGFyZW50ID0gY29tbWFuZHNmcmFtZQoKCS0tICJDbG9zZSB0aGlzIEdVSSIgZm9yIHRoZSBidXR0b25zLgoJbG9jYWwgRGV0YWlsczMgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCglEZXRhaWxzMy5OYW1lID0gIkRldGFpbHMzIgoJRGV0YWlsczMuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCglEZXRhaWxzMy5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMS4wMDAKCURldGFpbHMzLkJvcmRlckNvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDEyOCwgMTI4LCAxMjgpCglEZXRhaWxzMy5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLjg3NSwgMCkKCURldGFpbHMzLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMC4xNSwgMCkKCURldGFpbHMzLkZvbnQgPSBFbnVtLkZvbnQuSm9zZWZpblNhbnMKCURldGFpbHMzLlRleHQgPSAiUHJlc3MgWyB0byBvcGVuIGFuZCBjbG9zZSB0aGlzIEdVSS4iCglEZXRhaWxzMy5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjUxLCAyNTEsIDI1NSkKCURldGFpbHMzLlRleHRTY2FsZWQgPSB0cnVlCglEZXRhaWxzMy5UZXh0U2l6ZSA9IDE0LjAwMAoJRGV0YWlsczMuVGV4dFdyYXBwZWQgPSB0cnVlCgl0YWJsZS5pbnNlcnQobGFiZWxzLCBEZXRhaWxzMykKCURldGFpbHMzLlBhcmVudCA9IGJ1dHRvbnNmcmFtZQoKCS0tIFNjcmlwdCB0ZXJtaW5hdGlvbiBpbnN0cnVjdGlvbnMuCglsb2NhbCBEZXRhaWxzNCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKCURldGFpbHM0Lk5hbWUgPSAiRGV0YWlsczQiCglEZXRhaWxzNC5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKCURldGFpbHM0LkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxLjAwMAoJRGV0YWlsczQuQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTI4LCAxMjgsIDEyOCkKCURldGFpbHM0LlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDEuMSwgMCkKCURldGFpbHM0LlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMC4xNzUsIDApCglEZXRhaWxzNC5Gb250ID0gRW51bS5Gb250Lkpvc2VmaW5TYW5zCglEZXRhaWxzNC5UZXh0ID0gIkhvbGQgdGhlIExlZnQgYW5kIFJpZ2h0IGFycm93IGtleXMsIHRoZW4gcHJlc3MgYW55IGtleSB0byBxdWl0IFZpZFVJLiIKCURldGFpbHM0LlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTEsIDI1MSwgMjU1KQoJRGV0YWlsczQuVGV4dFNjYWxlZCA9IHRydWUKCURldGFpbHM0LlRleHRTaXplID0gMTQuMDAwCglEZXRhaWxzNC5UZXh0V3JhcHBlZCA9IHRydWUKCURldGFpbHM0LlBhcmVudCA9IGJ1dHRvbnNmcmFtZQoKCS0tIFRoZSB2ZXJzaW9uIG51bWJlciBhYm92ZSB0aGUgY29tbWFuZCBib3guCglsb2NhbCBWZXJzaW9uID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiKQoJVmVyc2lvbi5OYW1lID0gIlZlcnNpb24iCglWZXJzaW9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQoJVmVyc2lvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMS4wMDAKCVZlcnNpb24uQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTI4LCAxMjgsIDEyOCkKCVZlcnNpb24uUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMC4wNSwgMCkKCVZlcnNpb24uU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLjEsIDApCglWZXJzaW9uLkZvbnQgPSBFbnVtLkZvbnQuSm9zZWZpblNhbnMKCVZlcnNpb24uVGV4dCA9ICJWZXJzaW9uICIgLi4gdmVyTnVtCglWZXJzaW9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTEsIDI1MSwgMjU1KQoJVmVyc2lvbi5UZXh0U2NhbGVkID0gdHJ1ZQoJVmVyc2lvbi5UZXh0U2l6ZSA9IDE0LjAwMAoJVmVyc2lvbi5UZXh0V3JhcHBlZCA9IHRydWUKCXRhYmxlLmluc2VydChsYWJlbHMsIFZlcnNpb24pCglWZXJzaW9uLlBhcmVudCA9IGNvbW1hbmRzZnJhbWUKCgktLSBUaGUgYmFja2dyb3VuZCBmb3IgdGhlIFVJLgoJbG9jYWwgbWFpbmZyYW1lID0gSW5zdGFuY2UubmV3KCJTY3JvbGxpbmdGcmFtZSIpCgltYWluZnJhbWUuTmFtZSA9ICJtYWluZnJhbWUiCgltYWluZnJhbWUuQWN0aXZlID0gdHJ1ZQoJbWFpbmZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNSwgNzcsIDI1NSkKCW1haW5mcmFtZS5Cb3JkZXJDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxMjgsIDEyOCwgMTI4KQoJbWFpbmZyYW1lLkJvcmRlclNpemVQaXhlbCA9IDIKCW1haW5mcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIDAsIDAuNSwgMCkKCW1haW5mcmFtZS5BbmNob3JQb2ludCA9IFZlY3RvcjIubmV3KDAuNSwgMC41KQoJbWFpbmZyYW1lLlNpemUgPSBVRGltMi5uZXcoMC44Njc3Njg1ODYsIDAsIDAuNiwgMCkKCW1haW5mcmFtZS5TY3JvbGxCYXJUaGlja25lc3MgPSA2CgltYWluZnJhbWUuUGFyZW50ID0gYnV0dG9uc21haW4KCgktLSBHcmlkIGxheW91dCBmb3IgdGhlIGJ1dHRvbnMuCglsb2NhbCBVSUdyaWRMYXlvdXQgPSBJbnN0YW5jZS5uZXcoIlVJR3JpZExheW91dCIpCglVSUdyaWRMYXlvdXQuRmlsbERpcmVjdGlvbiA9IEVudW0uRmlsbERpcmVjdGlvbi5Ib3Jpem9udGFsCglVSUdyaWRMYXlvdXQuSG9yaXpvbnRhbEFsaWdubWVudCA9IEVudW0uSG9yaXpvbnRhbEFsaWdubWVudC5DZW50ZXIKCVVJR3JpZExheW91dC5DZWxsUGFkZGluZyA9IFVEaW0yLm5ldygwLCA3LCAwLCA3KQoJVUlHcmlkTGF5b3V0LkNlbGxTaXplID0gVURpbTIubmV3KDAuNDUsIDAsIDAsIDMwKQoJVUlHcmlkTGF5b3V0LlNvcnRPcmRlciA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyCglVSUdyaWRMYXlvdXQuUGFyZW50ID0gbWFpbmZyYW1lCgoJbG9jYWwgYnV0dG9ucyA9IHt9CgoJLS0tLS0tIFRoZSBidXR0b25zIQoKCS0tIENoYW5nZSB2aWV3LiBXaXRoIHRoaXMgYWN0aXZlLCBpdCB3aWxsIGJlZ2luIHZpZXdpbmcgdGhlIGxhc3QgcGVyc29uIGFkZGVkIHRvIHRoZSAicGxheWVybGlzdCIgbGlzdC4KCglsb2NhbCBWaWV3Q2hhbmdlID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKCVZpZXdDaGFuZ2UuTmFtZSA9ICJWaWV3Q2hhbmdlIgoJVmlld0NoYW5nZS5UZXh0ID0gIlZpZXcgUGxheWVycyAoT2ZmKSIKCXRhYmxlLmluc2VydChidXR0b25zLFZpZXdDaGFuZ2UpCgoJQ2hhbmdlVmlld0VuYWJsZWQgPSBmYWxzZQoJbG9jYWwgTGFzdFBvcwoKCWxvY2FsIFZpZXdJbmRleCA9IDAKCXZpZXdpbmcgPSBwbGF5ZXIuTmFtZQoKCWxvY2FsIGZ1bmN0aW9uIFZpZXdDaGFuZ2VGdW5jKGlucHV0KQoJCWlmICNwbGF5ZXJsaXN0ID09IDAgdGhlbgoJCQlWaWV3SW5kZXggPSAwCgkJCVZpZXdDaGFuZ2UuVGV4dCA9ICJWaWV3IFBsYXllcnMgKE9uKSB8IFZpZXdpbmcgbm9ib2R5IgoJCWVsc2UKCQkJaWYgaW5wdXQgPT0gRW51bS5LZXlDb2RlLk0gdGhlbgoJCQkJLS0gVGhpcyBzaG91bGQgZmlyZSBpZiB0aGUgZnVuY3Rpb24gZ2V0cyBydW4gd2l0aCB0aGUgS2V5Q29kZSBNIGFzIGFuIGFyZwoJCQkJaWYgKFZpZXdJbmRleCArIDEpID4gI3BsYXllcmxpc3QgdGhlbgoJCQkJCXdhcm4oIlZpZXdJbmRleCB3YXMgZm91bmQgZ3JlYXRlciB0aGFuIHRoZSBjdXJyZW50IHBsYXllciBsaXN0ISIpCQkJCQkKCQkJCQlWaWV3SW5kZXggPSAxCgkJCQkJdmlld2luZyA9IHBsYXllcmxpc3RbVmlld0luZGV4XQoJCQkJCVZpZXdDaGFuZ2UuVGV4dCA9ICJWaWV3IFBsYXllciAoT24pIHwgVmlld2luZyAiIC4uIHZpZXdpbmcKCQkJCQlnYW1lLldvcmtzcGFjZS5DYW1lcmEuQ2FtZXJhU3ViamVjdCA9IHBsYXllcnNbdmlld2luZ10uQ2hhcmFjdGVyLlByaW1hcnlQYXJ0CgkJCQllbHNlCgkJCQkJVmlld0luZGV4ID0gVmlld0luZGV4ICsgMQoJCQkJCXZpZXdpbmcgPSBwbGF5ZXJsaXN0W1ZpZXdJbmRleF0KCQkJCQlWaWV3Q2hhbmdlLlRleHQgPSAiVmlldyBQbGF5ZXIgKE9uKSB8IFZpZXdpbmcgIiAuLiB2aWV3aW5nCgkJCQkJZ2FtZS5Xb3Jrc3BhY2UuQ2FtZXJhLkNhbWVyYVN1YmplY3QgPSBwbGF5ZXJzW3ZpZXdpbmddLkNoYXJhY3Rlci5QcmltYXJ5UGFydAoJCQkJZW5kCgkJCWVsc2VpZiBpbnB1dCA9PSBFbnVtLktleUNvZGUuTiB0aGVuCgkJCQktLSBUaGlzIHNob3VsZCBmaXJlIGlmIHRoZSBmdW5jdGlvbiBnZXRzIHJ1biB3aXRoIHRoZSBLZXlDb2RlIE4gYXMgYW4gYXJnCgkJCQlpZiAoVmlld0luZGV4IC0gMSkgPD0gMCB0aGVuCgkJCQkJd2FybigiVmlld0luZGV4IHdhcyBmb3VuZCBzbWFsbGVyIHRoYW4gdGhlIGN1cnJlbnQgcGxheWVyIGxpc3QhIikKCQkJCQlWaWV3SW5kZXggPSAjcGxheWVybGlzdAoJCQkJCXZpZXdpbmcgPSBwbGF5ZXJsaXN0W1ZpZXdJbmRleF0KCQkJCQlWaWV3Q2hhbmdlLlRleHQgPSAiVmlldyBQbGF5ZXIgKE9uKSB8IFZpZXdpbmcgIiAuLiB2aWV3aW5nCgkJCQkJZ2FtZS5Xb3Jrc3BhY2UuQ2FtZXJhLkNhbWVyYVN1YmplY3QgPSBwbGF5ZXJzW3ZpZXdpbmddLkNoYXJhY3Rlci5QcmltYXJ5UGFydAoJCQkJZWxzZQoJCQkJCVZpZXdJbmRleCA9IFZpZXdJbmRleCAtIDEKCQkJCQl2aWV3aW5nID0gcGxheWVybGlzdFtWaWV3SW5kZXhdCgkJCQkJVmlld0NoYW5nZS5UZXh0ID0gIlZpZXcgUGxheWVyIChPbikgfCBWaWV3aW5nICIgLi4gdmlld2luZwoJCQkJCWdhbWUuV29ya3NwYWNlLkNhbWVyYS5DYW1lcmFTdWJqZWN0ID0gcGxheWVyc1t2aWV3aW5nXS5DaGFyYWN0ZXIuUHJpbWFyeVBhcnQKCQkJCWVuZAoJCQllbHNlCgkJCQktLSBUaGlzIHNob3VsZCBmaXJlIGlmIGl0IGdldHMgIm5pbCIgYXMgdGhlIGFyZwoJCQkJVmlld0luZGV4ID0gMQoJCQkJdmlld2luZyA9IHBsYXllcmxpc3RbVmlld0luZGV4XQoJCQkJVmlld0NoYW5nZS5UZXh0ID0gIlZpZXcgUGxheWVyIChPbikgfCBWaWV3aW5nICIgLi4gdmlld2luZwoJCQkJZ2FtZS5Xb3Jrc3BhY2UuQ2FtZXJhLkNhbWVyYVN1YmplY3QgPSBwbGF5ZXJzW3ZpZXdpbmddLkNoYXJhY3Rlci5QcmltYXJ5UGFydAoKCQkJZW5kCgkJZW5kCgllbmQKCglWaWV3Q2hhbmdlLk1vdXNlQnV0dG9uMURvd246Q29ubmVjdChmdW5jdGlvbigpCgkJaWYgQ2hhbmdlVmlld0VuYWJsZWQgdGhlbgoJCQlDaGFuZ2VWaWV3RW5hYmxlZCA9IGZhbHNlCgkJCS0tIFJlbW92ZSB0aGUgdmlld2luZyBwbGF0Zm9ybQoJCQlnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpWyIuSWdub3JlIl06RmluZEZpcnN0Q2hpbGQoIlZpZXdpbmcgUGxhdGUiKTpEZXN0cm95KCkKCgkJCS0tIFVuYW5jaG9yIHBsYXllcgoJCQlmb3IgaSx2IGluIHBhaXJzKHBsYXllci5DaGFyYWN0ZXI6R2V0Q2hpbGRyZW4oKSkgZG8KCQkJCWlmIHY6SXNBKCJCYXNlUGFydCIpIHRoZW4KCQkJCQl2LkFuY2hvcmVkID0gZmFsc2UKCQkJCWVuZAoJCQllbmQKCgkJCWdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpNb3ZlVG8oTGFzdFBvcyArIFZlY3RvcjMubmV3KDAsMTAsMCkpCgoJCQktLSBTZXQgY2FtZXJhIHN1YmplY3QgYmFjayB0byB0aGUgcGxheWVyCgkJCWdhbWUuV29ya3NwYWNlLkNhbWVyYS5DYW1lcmFTdWJqZWN0ID0gcGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0CgoJCQlWaWV3Q2hhbmdlLlRleHQgPSAiVmlldyBQbGF5ZXJzIChPZmYpIgoJCWVsc2UKCQkJQ2hhbmdlVmlld0VuYWJsZWQgPSB0cnVlCgoJCQktLSBTYXZlIGN1cnJlbnQgcG9zaXRpb24KCQkJTGFzdFBvcyA9IHBsYXllci5DaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikuUG9zaXRpb24KCgkJCS0tIENyZWF0ZSB2aWV3IHBsYXRlCgkJCWxvY2FsIFZpZXdQbGF0ZSA9IEluc3RhbmNlLm5ldygiUGFydCIpCgkJCVZpZXdQbGF0ZS5QYXJlbnQgPSBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpWyIuSWdub3JlIl0KCQkJVmlld1BsYXRlLkFuY2hvcmVkID0gdHJ1ZQoJCQlWaWV3UGxhdGUuU2l6ZSA9IFZlY3RvcjMubmV3KDUsMSw1KQoJCQlWaWV3UGxhdGUuUG9zaXRpb24gPSBWZWN0b3IzLm5ldygwLDEwMDAsMCkKCQkJVmlld1BsYXRlLk5hbWUgPSAiVmlld2luZyBQbGF0ZSIKCQkJVmlld1BsYXRlLlRyYW5zcGFyZW5jeSA9IDEKCgkJCS0tIFRlbGVwb3J0IHBsYXllciB0byB2aWV3IHBsYXRlCgkJCWdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpNb3ZlVG8oVmlld1BsYXRlLlBvc2l0aW9uICsgVmVjdG9yMy5uZXcoMCwzLDApKQoKCQkJLS0gUnVuIHRoZSBWaWV3Q2hhbmdlIGZ1bmN0aW9uIHdpdGggbm8gaW5wdXQgcHJlc3NlcyB0byBpbml0aWFsaXplIGl0CgkJCVZpZXdDaGFuZ2VGdW5jKG5pbCkKCQkJd2FpdCguNzUpCgoJCQktLSBBbmNob3IgcGxheWVyCgkJCWZvciBpLHYgaW4gcGFpcnMocGxheWVyLkNoYXJhY3RlcjpHZXRDaGlsZHJlbigpKSBkbwoJCQkJaWYgdjpJc0EoIkJhc2VQYXJ0IikgdGhlbgoJCQkJCXYuQW5jaG9yZWQgPSB0cnVlCgkJCQllbmQKCQkJZW5kCgkJZW5kCgllbmQpCgoJLS0gRVNQCgoJbG9jYWwgRVNQID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKCUVTUC5OYW1lID0gIkVTUCIKCUVTUC5UZXh0ID0gIkVTUCAoT2ZmKSBbQl0iCgl0YWJsZS5pbnNlcnQoYnV0dG9ucywgRVNQKQoKCWxvY2FsIEhvbGRlciA9IEluc3RhbmNlLm5ldygiRm9sZGVyIiwgZ2FtZS5Db3JlR3VpKQoJSG9sZGVyLk5hbWUgPSAiRVNQIgoKCUVTUEVuYWJsZWQgPSBmYWxzZQoKCWxvY2FsIFVwZGF0ZUZ1bmNzID0ge30KCglsb2NhbCBCb3ggPSBJbnN0YW5jZS5uZXcoIkJveEhhbmRsZUFkb3JubWVudCIpCglCb3guTmFtZSA9ICJuaWxCb3giCglCb3guU2l6ZSA9IFZlY3RvcjMubmV3KDQsIDcsIDQpCglCb3guQ29sb3IzID0gQ29sb3IzLm5ldygxMDAgLyAyNTUsIDEwMCAvIDI1NSwgMTAwIC8gMjU1KQoJQm94LlRyYW5zcGFyZW5jeSA9IDAuNwoJQm94LlpJbmRleCA9IDAKCUJveC5BbHdheXNPblRvcCA9IHRydWUKCUJveC5WaXNpYmxlID0gdHJ1ZQoKCWxvY2FsIE5hbWVUYWcgPSBJbnN0YW5jZS5uZXcoIkJpbGxib2FyZEd1aSIpCglOYW1lVGFnLk5hbWUgPSAibmlsTmFtZVRhZyIKCU5hbWVUYWcuRW5hYmxlZCA9IHRydWUKCU5hbWVUYWcuU2l6ZSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDUwKQoJTmFtZVRhZy5BbHdheXNPblRvcCA9IHRydWUKCU5hbWVUYWcuU3R1ZHNPZmZzZXQgPSBWZWN0b3IzLm5ldygwLCAzLjYsIDApCglOYW1lVGFnLk1heERpc3RhbmNlID0gNzUwCgoJbG9jYWwgVGFnID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBOYW1lVGFnKQoJVGFnLk5hbWUgPSAiVGFnIgoJVGFnLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCglUYWcuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgLTUwLCAwLCAwKQoJVGFnLlNpemUgPSBVRGltMi5uZXcoMCwgMzAwLCAwLCAyMCkKCVRhZy5UZXh0U2l6ZSA9IDIwCglUYWcuVGV4dENvbG9yMyA9IENvbG9yMy5uZXcoMTAwIC8gMjU1LCAxMDAgLyAyNTUsIDEwMCAvIDI1NSkKCVRhZy5UZXh0U3Ryb2tlQ29sb3IzID0gQ29sb3IzLm5ldygwIC8gMjU1LCAwIC8gMjU1LCAwIC8gMjU1KQoJVGFnLlRleHRTdHJva2VUcmFuc3BhcmVuY3kgPSAwLjQKCVRhZy5UZXh0ID0gIjxiPk5vdCBBdmFpbGFibGU8L2I+IgoJVGFnLkZvbnQgPSBFbnVtLkZvbnQuVWJ1bnR1CglUYWcuVGV4dFNjYWxlZCA9IGZhbHNlCglUYWcuVGV4dFRyYW5zcGFyZW5jeSA9IDAKCVRhZy5SaWNoVGV4dCA9IHRydWUKCglmdW5jdGlvbiBMb2FkQ2hhcmFjdGVyKHYpCgoJCWxvY2FsIHRibFBsYXllckRhdGEgPSB7fQoJCVJTUjpXYWl0Rm9yQ2hpbGQoIlBsYXllckRhdGEiKS5PbkNsaWVudEV2ZW50OkNvbm5lY3QoZnVuY3Rpb24odiwgdGJsRGF0YSkKCQkJdGJsUGxheWVyRGF0YVt2XSA9IHRibERhdGEKCQllbmQpCgoJCWlmIHYgfj0gcGxheWVyIHRoZW4KCQkJcmVwZWF0IHdhaXQoKSB1bnRpbCB2LkNoYXJhY3RlciB+PSBuaWwKCQkJdi5DaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZCIpCgkJCWxvY2FsIHZIb2xkZXIgPSBIb2xkZXI6RmluZEZpcnN0Q2hpbGQodi5OYW1lKQoJCQl2SG9sZGVyOkNsZWFyQWxsQ2hpbGRyZW4oKQoKCQkJbG9jYWwgYiA9IEJveDpDbG9uZSgpCgkJCWIuTmFtZSA9IHYuTmFtZSAuLiAiQm94IgoJCQliLkFkb3JuZWUgPSB2LkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0CgkJCWIuUGFyZW50ID0gdkhvbGRlcgoKCQkJbG9jYWwgdCA9IE5hbWVUYWc6Q2xvbmUoKQoJCQl0Lk5hbWUgPSB2Lk5hbWUgLi4gIk5hbWVUYWciCgkJCXQuUGFyZW50ID0gdkhvbGRlcgoJCQl0LkFkb3JuZWUgPSB2LkNoYXJhY3RlcjpXYWl0Rm9yQ2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiLCA1KQoJCQlpZiBub3QgdC5BZG9ybmVlIHRoZW4KCQkJCXJldHVybiBVbmxvYWRDaGFyYWN0ZXIodikKCQkJZW5kCgkJCXQuVGFnLlRleHQgPSAiPHNjPiIgLi4gdi5OYW1lIC4uICI8L3NjPiIKCQkJdC5FbmFibGVkID0gdHJ1ZQoJCQl3YWl0KCkKCgkJCWxvY2FsIGZ1bmN0aW9uIFVwZGF0ZU5hbWVUYWcoKQoJCQkJaWYgbm90IHBjYWxsKGZ1bmN0aW9uKCkKCQkJCQkJLS0gdi5DaGFyYWN0ZXIuSHVtYW5vaWQuRGlzcGxheURpc3RhbmNlVHlwZSA9IEVudW0uSHVtYW5vaWREaXNwbGF5RGlzdGFuY2VUeXBlLk5vbmUKCQkJCQkJbG9jYWwgbWF4aCA9IG1hdGguY2VpbCh2LkNoYXJhY3Rlci5IdW1hbm9pZC5NYXhIZWFsdGggKiAxMCkKCQkJCQkJbG9jYWwgaCA9IG1hdGguY2VpbCh2LkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggKiAxMCkKCQkJCQkJbG9jYWwgc3RyaCA9ICc8Zm9udCB3ZWlnaHQ9ImhlYXZ5Ij5IOjwvZm9udD4gJyAuLiAobm90KG1heGggPT0gMCkgYW5kIHRvc3RyaW5nKG1hdGguY2VpbCgxMDAgKiBoIC8gbWF4aCkpIG9yIDApIC4uICIlICgiIC4uIHRvc3RyaW5nKGgpIC4uICIvIiAuLiB0b3N0cmluZyhtYXhoKSAuLiAiKSIKCQkJCQkJLS0KCQkJCQkJbG9jYWwgbWF4bSA9IHRibFBsYXllckRhdGFbdl0gYW5kIG1hdGguY2VpbCh0YmxQbGF5ZXJEYXRhW3ZdLk1heE1hbmEgKiAxMCkgb3IgMTAwMAoJCQkJCQlsb2NhbCBtID0gdGJsUGxheWVyRGF0YVt2XSBhbmQgbWF0aC5jZWlsKHRibFBsYXllckRhdGFbdl0uTWFuYSAqIDEwKSBvciAxMDAwCgkJCQkJCWxvY2FsIHN0cm0gPSAnPGZvbnQgd2VpZ2h0PSJoZWF2eSI+TTo8L2ZvbnQ+ICcgLi4gKG5vdChtYXhtID09IDApIGFuZCB0b3N0cmluZyhtYXRoLmNlaWwoMTAwICogbSAvIG1heG0pKSBvciAwKSAuLiAiJSAoIiAuLiB0b3N0cmluZyhtKSAuLiAiLyIgLi4gdG9zdHJpbmcobWF4bSkgLi4gIikiCgkJCQkJCS0tCgkJCQkJCWxvY2FsIG1heHMgPSB0YmxQbGF5ZXJEYXRhW3ZdIGFuZCBtYXRoLmNlaWwodGJsUGxheWVyRGF0YVt2XS5NYXhTdGFtaW5hICogMTApIG9yIDEwMDAKCQkJCQkJbG9jYWwgcyA9IHRibFBsYXllckRhdGFbdl0gYW5kIG1hdGguY2VpbCh0YmxQbGF5ZXJEYXRhW3ZdLlN0YW1pbmEgKiAxMCkgb3IgMTAwMAoJCQkJCQlsb2NhbCBzdHJzID0gICc8Zm9udCB3ZWlnaHQ9ImhlYXZ5Ij5TOjwvZm9udD4gJyAuLiAobm90KG1heHMgPT0gMCkgYW5kIHRvc3RyaW5nKG1hdGguY2VpbCgxMDAgKiBzIC8gbWF4cykpIG9yIDApIC4uICIlICgiIC4uIHRvc3RyaW5nKHMpIC4uICIvIiAuLiB0b3N0cmluZyhtYXhzKSAuLiAiKSIKCgkJCQkJCXQuVGFnLlRleHQgPSAnPGZvbnQgd2VpZ2h0PSJoZWF2eSI+PHNjPicgLi4gdi5OYW1lIC4uICc8L3NjPjwvZm9udD4nIC4uICgiXG4iIC4uIHN0cmgpIC4uICgiXG4iIC4uIHN0cm0pIC4uICgiXG4iIC4uIHN0cnMpCgoJCQkJCQlpZiBFU1BFbmFibGVkIGFuZCB0YWJsZS5maW5kKHBsYXllcmxpc3QsIHYuTmFtZSkgdGhlbgoJCQkJCQkJdC5UYWcuVGV4dFRyYW5zcGFyZW5jeSA9IDAKCQkJCQkJCWIuVHJhbnNwYXJlbmN5ID0gMC43CgkJCQkJCWVsc2UKCQkJCQkJCXQuVGFnLlRleHRUcmFuc3BhcmVuY3kgPSAxCgkJCQkJCQliLlRyYW5zcGFyZW5jeSA9IDEKCQkJCQkJZW5kCgkJCQkJCWlmIGggLyBtYXhoID49IDAuNzUgdGhlbgoJCQkJCQkJdC5UYWcuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDYyLCAyNTUsIDYyKQoJCQkJCQkJYi5Db2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxNSwgMTUzLCA2NCkKCQkJCQkJZWxzZWlmIGggLyBtYXhoIDw9IDAuNzUgYW5kIGggLyBtYXhoID49IDAuNSB0aGVuCgkJCQkJCQl0LlRhZy5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDU1KQoJCQkJCQkJYi5Db2xvcjMgPSBDb2xvcjMuZnJvbVJHQigxNzksIDEzMiwgMTUpCgkJCQkJCWVsc2VpZiBoIC8gbWF4aCA9PSAwIHRoZW4KCQkJCQkJCXQuVGFnLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDIsIDIpCgkJCQkJCQliLkNvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDEzNCwgMTIsIDY2KQoJCQkJCQllbHNlCgkJCQkJCQl0LlRhZy5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAoMTk2ICogKGggLyBtYXhoKSksICgyICogKGggLyBtYXhoKSkpCgkJCQkJCQliLkNvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDE3OSwgKDEzMiAqIChoIC8gbWF4aCkpLCAoMTUgKiAoaCAvIG1heGgpKSkKCQkJCQkJZW5kCgkJCQkJZW5kKSB0aGVuCgkJCQkJVXBkYXRlRnVuY3Nbdl0gPSBuaWwKCQkJCWVuZAoJCQllbmQKCQkJVXBkYXRlTmFtZVRhZygpCgkJCVVwZGF0ZUZ1bmNzW3ZdID0gVXBkYXRlTmFtZVRhZwoJCWVuZAoJZW5kCgoJZnVuY3Rpb24gVW5sb2FkQ2hhcmFjdGVyKHYpCgkJbG9jYWwgdkhvbGRlciA9IEhvbGRlcjpGaW5kRmlyc3RDaGlsZCh2Lk5hbWUpCgkJaWYgdkhvbGRlciBhbmQgKHZIb2xkZXI6RmluZEZpcnN0Q2hpbGQodi5OYW1lIC4uICJCb3giKSB+PSBuaWwgb3IgdkhvbGRlcjpGaW5kRmlyc3RDaGlsZCh2Lk5hbWUgLi4gIk5hbWVUYWciKSB+PSBuaWwpIHRoZW4KCQkJdkhvbGRlcjpDbGVhckFsbENoaWxkcmVuKCkKCQllbmQKCWVuZAoKCWZ1bmN0aW9uIExvYWRQbGF5ZXIodikKCQlpZiB2IH49IHBsYXllciB0aGVuCgkJCWxvY2FsIHZIb2xkZXIgPSBJbnN0YW5jZS5uZXcoIkZvbGRlciIsIEhvbGRlcikKCQkJdkhvbGRlci5OYW1lID0gdi5OYW1lCgkJCXYuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbigpCgkJCQlpZiBFU1BFbmFibGVkID09IHRydWUgdGhlbgoJCQkJCXBjYWxsKExvYWRDaGFyYWN0ZXIsIHYpCgkJCQllbmQKCQkJZW5kKQoJCQl2LkNoYXJhY3RlclJlbW92aW5nOkNvbm5lY3QoZnVuY3Rpb24oKQoJCQkJcGNhbGwoVW5sb2FkQ2hhcmFjdGVyLCB2KQoJCQllbmQpCgkJCUxvYWRDaGFyYWN0ZXIodikKCQllbmQKCWVuZAoKCWZ1bmN0aW9uIFVubG9hZFBsYXllcih2KQoJCVVubG9hZENoYXJhY3Rlcih2KQoJCWxvY2FsIHZIb2xkZXIgPSBIb2xkZXI6RmluZEZpcnN0Q2hpbGQodi5OYW1lKQoJCWlmIHZIb2xkZXIgdGhlbgoJCQl2SG9sZGVyOkRlc3Ryb3koKQoJCWVuZAoJZW5kCgoJZm9yIGksIHYgaW4gcGFpcnMocGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCgkJc3Bhd24oZnVuY3Rpb24oKSBwY2FsbChMb2FkUGxheWVyLCB2KSBlbmQpCgllbmQKCglwbGF5ZXJzLlBsYXllckFkZGVkOkNvbm5lY3QoZnVuY3Rpb24odikKCQlwY2FsbChMb2FkUGxheWVyLCB2KQoJZW5kKQoKCXBsYXllcnMuUGxheWVyUmVtb3Zpbmc6Q29ubmVjdChmdW5jdGlvbih2KQoJCXBjYWxsKFVubG9hZFBsYXllciwgdikKCWVuZCkKCglnYW1lLkl0ZW1DaGFuZ2VkOkNvbm5lY3QoZnVuY3Rpb24oaSkKCQlpZiBpOklzQSgiUGxheWVyIikgdGhlbgoJCQlpZiBIb2xkZXI6RmluZEZpcnN0Q2hpbGQoaS5OYW1lKSB0aGVuCgkJCQlVbmxvYWRDaGFyYWN0ZXIoaSkKCQkJCXdhaXQoKQoJCQkJTG9hZENoYXJhY3RlcihpKQoJCQllbmQKCQllbHNlaWYgaTpJc0EoIkh1bWFub2lkIikgYW5kIGkuUGFyZW50IHRoZW4KCQkJbG9jYWwgcCA9IHBsYXllcnM6R2V0UGxheWVyRnJvbUNoYXJhY3RlcihpLlBhcmVudCkKCQkJaWYgcCB+PSBwbGF5ZXIgYW5kIHAgfj0gbmlsIGFuZCBIb2xkZXI6RmluZEZpcnN0Q2hpbGQocC5OYW1lKSB0aGVuCgkJCQlwY2FsbChmdW5jdGlvbigpCgkJCQkJVXBkYXRlRnVuY3NbcF0oKQoJCQkJZW5kKQoJCQllbmQKCQllbmQKCWVuZCkKCglmdW5jdGlvbiB0b2dnbGVFU1AoKQoJCWlmIEVTUEVuYWJsZWQgPT0gZmFsc2UgdGhlbgoJCQlFU1BFbmFibGVkID0gdHJ1ZQoJCQlFU1AuVGV4dCA9ICJFU1AgKE9uKSBbQl0iCgkJCWZvciBpLHYgaW4gcGFpcnMocGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCgkJCQlzcGF3bihmdW5jdGlvbigpIHBjYWxsKExvYWRQbGF5ZXIsIHYpIGVuZCkKCQkJZW5kCgkJZWxzZQoJCQlFU1BFbmFibGVkID0gZmFsc2UKCQkJRVNQLlRleHQgPSAiRVNQIChPZmYpIFtCXSIKCQkJZm9yIGksIHYgaW4gcGFpcnMoZ2FtZS5QbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KCQkJCXNwYXduKGZ1bmN0aW9uKCkgcGNhbGwoVW5sb2FkUGxheWVyLCB2KSBlbmQpCgkJCWVuZAoJCWVuZAoJZW5kCgoJRVNQLk1vdXNlQnV0dG9uMURvd246Y29ubmVjdCh0b2dnbGVFU1ApCgoJLS0gUmVqb2luIFNlcnZlcgoKCWxvY2FsIFJlam9pblNlcnZlciA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCglSZWpvaW5TZXJ2ZXIuTmFtZSA9ICJSZWpvaW5TZXJ2ZXIiCglSZWpvaW5TZXJ2ZXIuVGV4dCA9ICJSZWpvaW4gU2VydmVyIgoJdGFibGUuaW5zZXJ0KGJ1dHRvbnMsIFJlam9pblNlcnZlcikKCglmdW5jdGlvbiByZWpvaW4oKQoJCWxvY2FsIHRzID0gZ2FtZTpHZXRTZXJ2aWNlKCJUZWxlcG9ydFNlcnZpY2UiKQoJCWxvY2FsIHAgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcgoKCQl0czpUZWxlcG9ydChnYW1lLlBsYWNlSWQsIHApCgllbmQKCglSZWpvaW5TZXJ2ZXIuTW91c2VCdXR0b24xRG93bjpjb25uZWN0KHJlam9pbikKCgktLSBDbGVhciBwbGF5ZXIgbGlzdAoKCWxvY2FsIENsZWFyUGxheWVyTGlzdCA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCglDbGVhclBsYXllckxpc3QuTmFtZSA9ICJDbGVhclBsYXllckxpc3QiCglDbGVhclBsYXllckxpc3QuVGV4dCA9ICJDbGVhciBwbGF5ZXIgbGlzdCIKCXRhYmxlLmluc2VydChidXR0b25zLCBDbGVhclBsYXllckxpc3QpCgoJZnVuY3Rpb24gY2xlYXJDb21wKCkKCQlwbGF5ZXJsaXN0ID0ge30KCgkJY29tbWFuZEJveE91dHB1dC5UZXh0ID0gIlBsYXllciBsaXN0IHwgKE5vbmUpIgoJZW5kCgoJQ2xlYXJQbGF5ZXJMaXN0Lk1vdXNlQnV0dG9uMURvd246Y29ubmVjdChjbGVhckNvbXApCgoJLS0gUGluZyBMYXN0IFBvc2l0aW9uCgoJbG9jYWwgTGFzdFBvc1BpbmcgPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQoJTGFzdFBvc1BpbmcuTmFtZSA9ICJMYXN0UG9zUGluZyIKCUxhc3RQb3NQaW5nLlRleHQgPSAiUGluZyBsYXN0IHBvc2l0aW9uIgoJdGFibGUuaW5zZXJ0KGJ1dHRvbnMsIExhc3RQb3NQaW5nKQoKCUxhc3RQb3NQaW5nLk1vdXNlQnV0dG9uMURvd246Y29ubmVjdChmdW5jdGlvbigpCgoJCWxvY2FsIEhCID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikuSGVhcnRiZWF0CgkJbG9jYWwgQ3VycmVudENvdW50ID0gNDUKCQlsb2NhbCBIQkNvbm5lY3QKCQkKCQlsb2NhbCBQaW5nQmVhY29uID0gSW5zdGFuY2UubmV3KCJQYXJ0IikKCQlQaW5nQmVhY29uLlBhcmVudCA9IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIilbIi5JZ25vcmUiXQoJCVBpbmdCZWFjb24uTmFtZSA9ICJQaW5nQmVhY29uIgoJCVBpbmdCZWFjb24uQ2FuQ29sbGlkZSA9IGZhbHNlCgkJUGluZ0JlYWNvbi5TaGFwZSA9IEVudW0uUGFydFR5cGUuQ3lsaW5kZXIKCQlQaW5nQmVhY29uLlNpemUgPSBWZWN0b3IzLm5ldygxMDAwMCwyNSwyNSkKCQlQaW5nQmVhY29uLk9yaWVudGF0aW9uID0gVmVjdG9yMy5uZXcoMCwwLDkwKQoJCVBpbmdCZWFjb24uTWF0ZXJpYWwgPSBFbnVtLk1hdGVyaWFsLk5lb24KCQlQaW5nQmVhY29uLkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyLCAyMzQpCgkJUGluZ0JlYWNvbi5BbmNob3JlZCA9IHRydWUKCQlpZiBMYXN0UG9zID09IG5pbCB0aGVuCgkJCVBpbmdCZWFjb24uUG9zaXRpb24gPSBwbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuUG9zaXRpb24KCQllbHNlCgkJCVBpbmdCZWFjb24uUG9zaXRpb24gPSBMYXN0UG9zCgkJZW5kCgkJUGluZ0JlYWNvbi5SZWZsZWN0YW5jZSA9IDAuNzUKCgkJbG9jYWwgZnVuY3Rpb24gT25IZWFydEJlYXQoZGVsdGEpCgkJCWlmIEN1cnJlbnRDb3VudCA+IDAgdGhlbgoJCQkJQ3VycmVudENvdW50ID0gQ3VycmVudENvdW50IC0gMQoJCQkJUGluZ0JlYWNvbi5UcmFuc3BhcmVuY3kgPSAoMC41ICsgKDEvQ3VycmVudENvdW50KSkKCQkJZWxzZQoJCQkJUGluZ0JlYWNvbjpEZXN0cm95KCkKCQkJCUhCQ29ubmVjdDpEaXNjb25uZWN0KCkKCQkJZW5kCgkJZW5kCgoJCUhCQ29ubmVjdCA9IEhCOkNvbm5lY3QoT25IZWFydEJlYXQpCgllbmQpCgoJLS0gR1VJIFR3ZWFraW5nCgoJZm9yIGksIHYgaW4gcGFpcnMoYm9yZGVycykgZG8KCQl2LkFuY2hvclBvaW50ID0gVmVjdG9yMi5uZXcoMSwgMC41KQoJCXYuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCgkJdi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC43NTAKCQl2LkJvcmRlckNvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApCgkJdi5Cb3JkZXJTaXplUGl4ZWwgPSAwCgkJdi5TaXplQ29uc3RyYWludCA9IEVudW0uU2l6ZUNvbnN0cmFpbnQuUmVsYXRpdmVZWQoJCXYuQWN0aXZlID0gdHJ1ZQoJCXYuUGFyZW50ID0gdmlkdWkKCWVuZAoKCWZvciBpLCB2IGluIHBhaXJzKGJ1dHRvbnMpIGRvCgkJdi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjM2LCAyMCwgMTE1KQoJCXYuQm9yZGVyQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMCwgMCkKCQl2LkJvcmRlclNpemVQaXhlbCA9IDIKCQl2LlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDApCgkJdi5TaXplID0gVURpbTIubmV3KDAsIDAsIDAsIDApCgkJdi5Gb250ID0gRW51bS5Gb250Lkpvc2VmaW5TYW5zCgkJdi5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjUxLCAyNTEsIDI1NSkKCQl2LlRleHRTY2FsZWQgPSB0cnVlCgkJdi5UZXh0U2l6ZSA9IDE0LjAwMAoJCXYuVGV4dFdyYXBwZWQgPSB0cnVlCgkJdi5MYXlvdXRPcmRlciA9IGkKCQl2LlBhcmVudCA9IG1haW5mcmFtZQoJZW5kCgoJLS0gY29tbWFuZEJveAoKCXRhcmdldCA9IHBsYXllci5OYW1lCgl0YXJnZXRTZXR0aW5nID0gInNlbGVjdCIKCWxvb3BpbmcgPSBmYWxzZQoJc21hcnRBdHRhY2sgPSB0cnVlCglIZWFsU2V0dGluZyA9IDEKCXN0dW5FbmFibGVkID0gdHJ1ZQoJRlBTRHJvcHBpbmcgPSBmYWxzZQoJbG9jYWwgYnV0dG9uSGVpZ2h0ID0gMzAKCWxvY2FsIGJ1dHRvbkdhcCA9IDcKCglSU1IgPSBnYW1lLlJlcGxpY2F0ZWRTdG9yYWdlOldhaXRGb3JDaGlsZCgiUmVtb3RlcyIpCgoJZnVuY3Rpb24gZ2V0SFJQKGNocikKCQlsb2NhbCBIUlAgPSBjaHI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBvciBjaHI6RmluZEZpcnN0Q2hpbGQoIlRvcnNvIikgb3IgY2hyOkZpbmRGaXJzdENoaWxkKCJVcHBlclRvcnNvIikKCQlyZXR1cm4gSFJQCgllbmQKCglmdW5jdGlvbiBnZXRIVU0oY2hyKQoJCWxvY2FsIEhVTSA9IGNocjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKQoJCXJldHVybiBIVU0KCWVuZAoKCWxvY2FsIGZ1bmN0aW9uIHJlc3Bhd24ocGxyKQoJCWxvY2FsIGNociA9IHBsci5DaGFyYWN0ZXIKCgkJaWYgKGNocjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikpIHRoZW4gY2hyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKTpDaGFuZ2VTdGF0ZSgxNSkgZW5kCgkJY2hyOkNsZWFyQWxsQ2hpbGRyZW4oKQoKCQlsb2NhbCBuZXdjaHIgPSBJbnN0YW5jZS5uZXcoIk1vZGVsIikKCQluZXdjaHIuUGFyZW50ID0gd29ya3NwYWNlCgkJcGxyLkNoYXJhY3RlciA9IG5ld2NocgoKCQl3YWl0KCkKCgkJcGxyLkNoYXJhY3RlciA9IGNocgoJCW5ld2NocjpEZXN0cm95KCkKCWVuZAoKCWxvY2FsIGZ1bmN0aW9uIHJlZnJlc2gocGxyKQoJCWxvY2FsIGh1bSA9IHBsci5DaGFyYWN0ZXIgYW5kIHBsci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIsIHRydWUpCgkJbG9jYWwgcG9zID0gaHVtIGFuZCBodW0uUm9vdFBhcnQgYW5kIGh1bS5Sb290UGFydC5DRnJhbWUKCQlsb2NhbCBwb3MxID0gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ0ZyYW1lCgoJCXJlc3Bhd24ocGxyKQoKCQlzcGF3bihmdW5jdGlvbigpCgkJCXBsci5DaGFyYWN0ZXJBZGRlZDpXYWl0KCk6V2FpdEZvckNoaWxkKCJIdW1hbm9pZCIpLlJvb3RQYXJ0LkNGcmFtZSwgd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ0ZyYW1lID0gcG9zLCB3YWl0KCkgYW5kIHBvczEKCQllbmQpCgllbmQKCglsb2NhbCBmdW5jdGlvbiBzcGxpdEFyZ3MoY29tbWFuZCkKCQljb21tYW5kID0gc3RyaW5nLmdzdWIoY29tbWFuZCwgIiwiLCAiICIpCgkJY29tbWFuZCA9IHN0cmluZy5zcGxpdChjb21tYW5kLCAiICIpCgoJCWZvciBpLCB2IGluIGlwYWlycyhjb21tYW5kKSBkbwoJCQl2ID0gc3RyaW5nLmdzdWIodiwgIiVzKyIsICIiKQoJCQlpZiB2ID09ICIiIHRoZW4KCQkJCXRhYmxlLnJlbW92ZShjb21tYW5kLCBpKQoJCQllbmQKCQllbmQKCgkJcmV0dXJuIGNvbW1hbmQKCWVuZAoKCWxvY2FsIGZ1bmN0aW9uIGZpbmRQbGF5ZXIodGV4dCkKCQlsb2NhbCBwbGF5ZXJzID0gZ2FtZS5QbGF5ZXJzOkdldFBsYXllcnMoKQoJCWxvY2FsIG1hdGNoZXMgPSB7fQoKCQlmb3IgaSwgUGxheWVyIGluIGlwYWlycyhwbGF5ZXJzKSBkbwoJCQlsb2NhbCBuYW1lID0gUGxheWVyLk5hbWUKCQkJdGV4dCA9IHN0cmluZy5sb3dlcih0ZXh0KQoJCQluYW1lID0gc3RyaW5nLmxvd2VyKG5hbWUpCgoJCQlsb2NhbCBtYXRjaCA9IHN0cmluZy5maW5kKG5hbWUsIHRleHQpCgoJCQlpZiBtYXRjaCB0aGVuCgkJCQl0YWJsZS5pbnNlcnQobWF0Y2hlcywgUGxheWVyLk5hbWUpCgkJCWVuZAoJCWVuZAoKCQlyZXR1cm4gbWF0Y2hlcwoJZW5kCgoJbG9jYWwgZHJ1Z3NFbmFibGVkID0gZmFsc2UKCWxvY2FsIGNvbG9yc0VuYWJsZWQgPSBmYWxzZQoJbG9jYWwgYmxhY2tjYXN0RW5hYmxlZCA9IGZhbHNlCglsb2NhbCBjb2xvckV4Y2x1ZGUgPSB7IkhlYWQiLCJUb3JzbyIsIkxlZnQgQXJtIiwiTGVmdCBMZWciLCJSaWdodCBBcm0iLCJSaWdodCBMZWciLCJTaGFyZCIsIkRpYW1vbmQifQoKCS0tW1s5OC8yNTUsIDM3LzI1NSwgMjA5LzI1NV1dCglsb2NhbCBjb2xvcjEKCWxvY2FsIGNvbG9yMgoJbG9jYWwgY29sb3IzCgoJbG9jYWwgZnVuY3Rpb24gdGVybUVCR3VpKCkKCQlidXR0b25zbWFpbjpUd2VlblBvc2l0aW9uKAoJCQlVRGltMi5uZXcoMS4yNSwgMCwgMC42NSwgMCksCgkJCSJJbiIsCgkJCSJTaW5lIiwKCQkJLjUsCgkJCXRydWUKCQkpCgkJY29tbWFuZHNtYWluOlR3ZWVuUG9zaXRpb24oCgkJCVVEaW0yLm5ldygxLjI1LCAwLCAwLjQ1LCAwKSwKCQkJIkluIiwKCQkJIlNpbmUiLAoJCQkuNSwKCQkJdHJ1ZQoJCSkKCQl3YWl0KDEpCgkJdGFyZ2V0ID0gcGxheWVyLk5hbWUKCQl2aWR1aTpEZXN0cm95KCkKCWVuZAoKCWxvY2FsIGZ1bmN0aW9uIGlucHV0Qm94KCkKCQlsb2NhbCB0ZXh0ID0gY29tbWFuZEJveC5UZXh0CgkJd2FpdCgpCgkJY29tbWFuZEJveC5UZXh0ID0gIiIKCgkJbG9jYWwgcHJlZml4ID0gIjsiCgkJaWYgc3RyaW5nLnN1Yih0ZXh0LCAxLCAxKSA9PSAocHJlZml4KSB0aGVuCgkJCXRleHQgPSBzdHJpbmcubG93ZXIodGV4dCkKCgkJCWlmIHN0cmluZy5zdWIodGV4dCwgMSwgMykgPT0gKHByZWZpeCAuLiAicmUiKSB0aGVuCgkJCQlyZWZyZXNoKHBsYXllcikKCQkJZWxzZWlmIHN0cmluZy5zdWIodGV4dCwgMSwgMykgPT0gKHByZWZpeCAuLiAidHAiKSB0aGVuCgkJCQlsb2NhbCB0ZWxlcG9ydHRvCiAgICAgICAgICAgICAgICBsb2NhbCB0cG5hbWUKCQkJCWxvY2FsIHBsYWNlID0gc3RyaW5nLnN1Yih0ZXh0LCA1KQoJCQkJbG9jYWwgcGxhY2VzID0gewoJCQkJCTU2NjM5OTI0NCwKCQkJCQkyNTY5NjI1ODA5LAoJCQkJCTU3MDE1ODA4MSwKCQkJCQk1Mzc2MDAyMDQsCgkJCQkJNTIwNTY4MjQwLAoJCQkJCTU1NDk1NTU2MCwKCQkJCQk2MDIwNDg1NTAsCgkJCQkJNTc1NDU2NjQ2LAoJCQkJCTE3MTM5ODYxMTIsCgkJCQkJMTI0MzYxNTYxMiwKCQkJCQk2MzgwNjUzMDIsCgkJCQkJNjM0MjQwODI2LAoJCQkJCTYzMzA0MjczMQoJCQkJfQoKCQkJCWlmIHBsYWNlID09ICJzdGFuZGFyZGxvdyIgb3IgcGxhY2UgPT0gIjU2NjM5OTI0NCIgdGhlbgoJCQkJCXRlbGVwb3J0dG8gPSBwbGFjZXNbMV0KICAgICAgICAgICAgICAgICAgICB0cG5hbWUgPSAiTG93YmllIFN0YW5kYXJkIgoJCQkJZWxzZWlmIHBsYWNlID09ICJzdGFuZGFyZDQwIiBvciBwbGFjZSA9PSAiMjU2OTYyNTgwOSIgdGhlbgoJCQkJCXRlbGVwb3J0dG8gPSBwbGFjZXNbMl0KICAgICAgICAgICAgICAgICAgICB0cG5hbWUgPSAiU3RhbmRhcmQiCgkJCQllbHNlaWYgcGxhY2UgPT0gImxpZ2h0IiBvciBwbGFjZSA9PSAiNTcwMTU4MDgxIiB0aGVuCgkJCQkJdGVsZXBvcnR0byA9IHBsYWNlc1szXQogICAgICAgICAgICAgICAgICAgIHRwbmFtZSA9ICJMaWdodCIKCQkJCWVsc2VpZiBwbGFjZSA9PSAiZmlyZSIgb3IgcGxhY2UgPT0gIjUzNzYwMDIwNCIgdGhlbgoJCQkJCXRlbGVwb3J0dG8gPSBwbGFjZXNbNF0KICAgICAgICAgICAgICAgICAgICB0cG5hbWUgPSAiRmlyZSIKCQkJCWVsc2VpZiBwbGFjZSA9PSAid2F0ZXIiIG9yIHBsYWNlID09ICI1MjA1NjgyNDAiIHRoZW4KCQkJCQl0ZWxlcG9ydHRvID0gcGxhY2VzWzVdCiAgICAgICAgICAgICAgICAgICAgdHBuYW1lID0gIldhdGVyIgoJCQkJZWxzZWlmIHBsYWNlID09ICJncmFzcyIgb3IgcGxhY2UgPT0gIjU1NDk1NTU2MCIgdGhlbgoJCQkJCXRlbGVwb3J0dG8gPSBwbGFjZXNbNl0KICAgICAgICAgICAgICAgICAgICB0cG5hbWUgPSAiR3Jhc3MiCgkJCQllbHNlaWYgcGxhY2UgPT0gImhlYXZlbiIgb3IgcGxhY2UgPT0gIjYwMjA0ODU1MCIgdGhlbgoJCQkJCXRlbGVwb3J0dG8gPSBwbGFjZXNbN10KICAgICAgICAgICAgICAgICAgICB0cG5hbWUgPSAiSGVhdmVuIgoJCQkJZWxzZWlmIHBsYWNlID09ICJtaW5pbG92YW5pYSIgb3IgcGxhY2UgPT0gInNhbnMiIG9yIHBsYWNlID09ICI1NzU0NTY2NDYiIHRoZW4KCQkJCQl0ZWxlcG9ydHRvID0gcGxhY2VzWzhdCiAgICAgICAgICAgICAgICAgICAgdHBuYW1lID0gIk1pbmlsb3ZhbmlhIgoJCQkJZWxzZWlmIHBsYWNlID09ICJzdXJ2aXZhbCIgb3IgcGxhY2UgPT0gIjEyNDM2MTU2MTIiIHRoZW4KCQkJCQl0ZWxlcG9ydHRvID0gcGxhY2VzWzEwXQogICAgICAgICAgICAgICAgICAgIHRwbmFtZSA9ICJTdXJ2aXZhbCIKCQkJCWVsc2VpZiBwbGFjZSA9PSAibWVnYXN0YW5kYXJkIiBvciBwbGFjZSA9PSAic3RhbmRhcmRtZWdhIiBvciBwbGFjZSA9PSAiNjM4MDY1MzAyIiB0aGVuCgkJCQkJdGVsZXBvcnR0byA9IHBsYWNlc1sxMV0KICAgICAgICAgICAgICAgICAgICB0cG5hbWUgPSAiTWVnYSBTdGFuZGFyZCIKCQkJCWVsc2VpZiBwbGFjZSA9PSAibWVnYWZpcmUiIG9yIHBsYWNlID09ICJmaXJlbWVnYSIgb3IgcGxhY2UgPT0gIjYzNDI0MDgyNiIgdGhlbgoJCQkJCXRlbGVwb3J0dG8gPSBwbGFjZXNbMTFdCiAgICAgICAgICAgICAgICAgICAgdHBuYW1lID0gIk1lZ2EgRmlyZSIKCQkJCWVsc2VpZiBwbGFjZSA9PSAibWVnYWdyYXNzIiBvciBwbGFjZSA9PSAiZ3Jhc3NtZWdhIiBvciBwbGFjZSA9PSAiNjMzMDQyNzMxIiB0aGVuCgkJCQkJdGVsZXBvcnR0byA9IHBsYWNlc1sxM10KICAgICAgICAgICAgICAgICAgICB0cG5hbWUgPSAiTWVnYSBHcmFzcyIKCQkJCWVsc2UKCQkJCQljb21tYW5kQm94T3V0cHV0LlRleHQgPSAiVGhlIHBsYWNlIHdhcyBpbmNvcnJlY3RseSBzcGVjaWZpZWQhIgoJCQkJZW5kCgoJCQkJaWYgdGVsZXBvcnR0byB0aGVuCgkJCQkJY29tbWFuZEJveE91dHB1dC5UZXh0ID0gIlRlbGVwb3J0aW5nIHRvICIgLi4gdHBuYW1lIC4uICIhIgoJCQkJCWdhbWU6R2V0U2VydmljZSgiVGVsZXBvcnRTZXJ2aWNlIik6VGVsZXBvcnQodGVsZXBvcnR0bykKCQkJCWVuZAoJCQllbHNlaWYgc3RyaW5nLnN1Yih0ZXh0LCAxLCA4KSA9PSAocHJlZml4IC4uICJkZWNsdXR0ZXIiKSB0aGVuCgkJCQlwbGF5ZXIuUGxheWVyR3VpLk1haW4uRnJhbWUxLlNpemUgPSBVRGltMi5uZXcoMC4zNzUsIDAsIDAuMzc1LCAwKQoJCQkJcGxheWVyLlBsYXllckd1aS5NYWluLkZyYW1lMS5JbWFnZVRyYW5zcGFyZW5jeSA9IDEKCQkJCXBsYXllci5QbGF5ZXJHdWkuTWFpbi5DaGFyYWN0ZXIuSW1hZ2VUcmFuc3BhcmVuY3kgPSAxCgkJCQlwbGF5ZXIuUGxheWVyR3VpLk1haW4uQm9vay5JbWFnZVRyYW5zcGFyZW5jeSA9IDEKCQkJCXBsYXllci5QbGF5ZXJHdWkuTWFpbi5TaG9wLkltYWdlVHJhbnNwYXJlbmN5ID0gMQoJCQkJcGxheWVyLlBsYXllckd1aS5NYWluLlNraWxsc0Jhci5TaXplID0gVURpbTIubmV3KDAuMzc1LCAwLCAwLjM3NSwgMCkKCQkJCXBsYXllci5QbGF5ZXJHdWkuTWFpbi5Ta2lsbHNCYXIuSW1hZ2VUcmFuc3BhcmVuY3kgPSAxCgkJCWVsc2VpZiBzdHJpbmcuc3ViKHRleHQsIDEsIDUpID09IChwcmVmaXggLi4gInJhaW4iKSB0aGVuCgkJCQlsb2NhbCBjdXJyZW50Q0FNID0gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKCQkJCWxvY2FsIHJhaW5Tb3VuZCA9IEluc3RhbmNlLm5ldygiU291bmQiKQoJCQkJcmFpblNvdW5kLkxvb3BlZCA9IHRydWUKCQkJCXJhaW5Tb3VuZC5Tb3VuZElkID0gInJieGFzc2V0aWQ6Ly8yODMxNjQ1OTMiCgkJCQlyYWluU291bmQuVm9sdW1lID0gMQoJCQkJcmFpblNvdW5kLlBhcmVudCA9IHdvcmtzcGFjZQoJCQkJcmFpblNvdW5kOlBsYXkoKQoKCQkJCWxvY2FsIHJhaW5QYXJ0ID0gSW5zdGFuY2UubmV3KCJQYXJ0IikKCQkJCXJhaW5QYXJ0LlNpemUgPSBWZWN0b3IzLm5ldygzMDAsIDMwMCwgMzAwKQoJCQkJcmFpblBhcnQuVHJhbnNwYXJlbmN5ID0gMQoJCQkJcmFpblBhcnQuQW5jaG9yZWQgPSB0cnVlCgkJCQlyYWluUGFydC5DYW5Db2xsaWRlID0gZmFsc2UKCgkJCQlsb2NhbCByYWluRWZmZWN0ID0gZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpOldhaXRGb3JDaGlsZCgiRWZmZWN0cyIpOldhaXRGb3JDaGlsZCgiUmFpbiIpCgkJCQlyYWluRWZmZWN0LlJhdGUgPSByYWluUGFydC5TaXplLm1hZ25pdHVkZQoJCQkJcmFpbkVmZmVjdC5QYXJlbnQgPSByYWluUGFydAoKCQkJCWxvY2FsIGlnbm9yZSA9IHdvcmtzcGFjZTpXYWl0Rm9yQ2hpbGQoIi5JZ25vcmUiKQoJCQkJcmFpblBhcnQuUGFyZW50ID0gaWdub3JlOldhaXRGb3JDaGlsZCgiLlNlcnZlckVmZmVjdHMiKQoKCQkJCWxvY2FsIGZvdiA9IDIgKiBtYXRoLnRhbihtYXRoLnJhZChjdXJyZW50Q0FNLkZpZWxkT2ZWaWV3KSAvIDIpCgkJCQlsb2NhbCBuZXdSYXkgPSBSYXkubmV3CgkJCQlsb2NhbCBoZWlnaHQgPSBWZWN0b3IzLm5ldygwLCA1MCwgMCkKCQkJCWxvY2FsIGRlcHRoID0gQ0ZyYW1lLm5ldygwLCBmb3YgKiA1MCwgLTYwKQoKCQkJCWdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpOkJpbmRUb1JlbmRlclN0ZXAoIlJhaW4iLCBFbnVtLlJlbmRlclByaW9yaXR5LkNhbWVyYS5WYWx1ZSwgZnVuY3Rpb24oKQoJCQkJCWxvY2FsIHJjID0gd29ya3NwYWNlOkZpbmRQYXJ0T25SYXlXaXRoSWdub3JlTGlzdChuZXdSYXkoY3VycmVudENBTS5DRnJhbWUucCwgaGVpZ2h0KSwge2lnbm9yZX0pCgoJCQkJCWlmIChyYykgdGhlbgoJCQkJCQlyYWluRWZmZWN0LkVuYWJsZWQgPSBmYWxzZQoJCQkJCQlyYWluU291bmQuVm9sdW1lID0gMC41CgkJCQkJCXJldHVybgoJCQkJCWVuZAoKCQkJCQlsb2NhbCB2aWV3cG9ydCA9IGN1cnJlbnRDQU0uVmlld3BvcnRTaXplCgkKCQkJCQlyYWluUGFydC5TaXplID0gVmVjdG9yMy5uZXcoZm92ICogdmlld3BvcnQueCAvIHZpZXdwb3J0LnkgKiA1MCwgMC4yLCAxMDApCgkJCQkJcmFpblBhcnQuQ0ZyYW1lID0gY3VycmVudENBTS5DRnJhbWUgKiBkZXB0aAoJCgkJCQkJcmFpbkVmZmVjdC5SYXRlID0gcmFpblBhcnQuU2l6ZS5tYWduaXR1ZGUKCQkJCQlyYWluRWZmZWN0LkVuYWJsZWQgPSB0cnVlCgkKCQkJCQlyYWluU291bmQuVm9sdW1lID0gMQoJCQkJZW5kKQoJCQllbHNlaWYgc3RyaW5nLnN1Yih0ZXh0LCAxLCA0KSA9PSAocHJlZml4IC4uICJmaXgiKSB0aGVuCgkJCQlpZiBwbGF5ZXIuUGxheWVyR3VpOldhaXRGb3JDaGlsZCgiTWVudSIpOkZpbmRGaXJzdENoaWxkKCJCbGFja1NjcmVlbiIpIHRoZW4KCQkJCQlwbGF5ZXIuUGxheWVyR3VpOldhaXRGb3JDaGlsZCgiTWVudSIpOkZpbmRGaXJzdENoaWxkKCJCbGFja1NjcmVlbiIpLlZpc2libGUgPSBmYWxzZQoJCQkJCWNvbW1hbmRCb3hPdXRwdXQuVGV4dCA9ICJGaXhpbmcgdGhlIE1lbnUgR1VJISIKCQkJCWVuZAoJCQllbHNlaWYgc3RyaW5nLnN1Yih0ZXh0LCAxLCAxMykgPT0gKHByZWZpeCAuLiAiYnV0dG9uaGVpZ2h0IikgdGhlbgoJCQkJYnV0dG9uSGVpZ2h0ID0gdG9udW1iZXIoc3RyaW5nLnN1Yih0ZXh0LCAxNSkpCgkJCQlVSUdyaWRMYXlvdXQuQ2VsbFNpemUgPSBVRGltMi5uZXcoMC40NSwgMCwgMCwgYnV0dG9uSGVpZ2h0KQoJCQkJbWFpbmZyYW1lLkNhbnZhc1NpemUgPSBVRGltMi5uZXcoMCwgMCwgMCwgbWF0aC5jZWlsKCNidXR0b25zIC8gMikgKiAoYnV0dG9uSGVpZ2h0ICsgYnV0dG9uR2FwKSAtIGJ1dHRvbkdhcCkKCgkJCQljb21tYW5kQm94T3V0cHV0LlRleHQgPSAiQnV0dG9uIGhlaWdodCB3YXMgc2V0IHRvICIgLi4gdG9udW1iZXIoc3RyaW5nLnN1Yih0ZXh0LCAxNSkpIC4uICIhIgoJCQllbHNlaWYgc3RyaW5nLnN1Yih0ZXh0LCAxLCAxMCkgPT0gKHByZWZpeCAuLiAiYnV0dG9uZ2FwIikgdGhlbgoJCQkJYnV0dG9uR2FwID0gdG9udW1iZXIoc3RyaW5nLnN1Yih0ZXh0LCAxMikpCgkJCQlVSUdyaWRMYXlvdXQuQ2VsbFBhZGRpbmcgPSBVRGltMi5uZXcoMCwgNywgMCwgYnV0dG9uR2FwKQoJCQkJbWFpbmZyYW1lLkNhbnZhc1NpemUgPSBVRGltMi5uZXcoMCwgMCwgMCwgbWF0aC5jZWlsKCNidXR0b25zIC8gMikgKiAoYnV0dG9uSGVpZ2h0ICsgYnV0dG9uR2FwKSAtIGJ1dHRvbkdhcCkKCgkJCQljb21tYW5kQm94T3V0cHV0LlRleHQgPSAiQnV0dG9uIGdhcCB3YXMgc2V0IHRvICIgLi4gdG9udW1iZXIoc3RyaW5nLnN1Yih0ZXh0LCAxMikpIC4uICIhIgoJCQllbHNlaWYgc3RyaW5nLnN1Yih0ZXh0LCAxLCA3KSA9PSAocHJlZml4IC4uICJyZWpvaW4iKSB0aGVuCgkJCQlyZWpvaW4oKQoJCQkJY29tbWFuZEJveE91dHB1dC5UZXh0ID0gIlJlam9pbmluZy4uLiIKCQkJZWxzZWlmIHN0cmluZy5zdWIodGV4dCwgMSwgOSkgPT0gKHByZWZpeCAuLiAiYXVyYS9vZmYiKSB0aGVuCgkJCQlyZXBlYXQgd2FpdCgpIHVudGlsIGdldEhSUChwbGF5ZXIuQ2hhcmFjdGVyKQoKCQkJCWlmIGdldEhSUChwbGF5ZXIuQ2hhcmFjdGVyKTpGaW5kRmlyc3RDaGlsZCgiQXVyYUdQIikgdGhlbgoJCQkJCWdldEhSUChwbGF5ZXIuQ2hhcmFjdGVyKTpGaW5kRmlyc3RDaGlsZCgiQXVyYUdQIik6RGVzdHJveSgpCgkJCQkJY29tbWFuZEJveE91dHB1dC5UZXh0ID0gIkF1cmEgaGFzIGJlZW4gcmVtb3ZlZC4iCgkJCQllbHNlCgkJCQkJY29tbWFuZEJveE91dHB1dC5UZXh0ID0gIkF1cmEgZG9lcyBub3QgZXhpc3QhIgoJCQkJZW5kCgkJCWVsc2VpZiBzdHJpbmcuc3ViKHRleHQsIDEsIDgpID09IChwcmVmaXggLi4gIm9yaWdpbiIpIHRoZW4KCQkJCXhwY2FsbChmdW5jdGlvbigpCgkJCQkJbG9jYWwgb3JpZ2luID0gSW5zdGFuY2UubmV3KCJQYXJ0IikKCQkJCQlvcmlnaW4uQW5jaG9yZWQgPSB0cnVlCgkJCQkJb3JpZ2luLlBhcmVudCA9IGdhbWUuV29ya3NwYWNlWyIuSWdub3JlIl1bIi5TZXJ2ZXJFZmZlY3RzIl0KCQkJCQlvcmlnaW4uTmFtZSA9ICJPcmlnaW4iCgkJCQkJb3JpZ2luLk1hdGVyaWFsID0gRW51bS5NYXRlcmlhbC5OZW9uCgkJCQkJb3JpZ2luLkJyaWNrQ29sb3IgPSBCcmlja0NvbG9yLm5ldygiUmVhbGx5IHJlZCIpCgkJCQkJb3JpZ2luLlNpemUgPSBWZWN0b3IzLm5ldygwLjUsIDAuNSwgMC41KQoJCQkJCW9yaWdpbi5Qb3NpdGlvbiA9IFZlY3RvcjMubmV3KDAsIDAsIDApCgkJCQkJd2FybigiTWFkZSBhIGJsb2NrIGF0IHRoZSBvcmlnaW4hIikKCQkJCQljb21tYW5kQm94T3V0cHV0LlRleHQgPSAiU3VjY2VzcyEgQ2hlY2sgY29uc29sZSBmb3IgbW9yZSBpbmZvIgoJCQkJZW5kLCBmdW5jdGlvbihlKQoJCQkJCXByaW50KCJFbmNvdW50ZXJlZCBhbiBlcnJvciEgeHBjYWxsIHNheXM6IiwgZSkKCQkJCQl3YXJuKCd0cmFjZWJhY2s6JywgZGVidWcudHJhY2ViYWNrKCkpCgkJCQllbmQpCgkJCWVsc2VpZiBzdHJpbmcuc3ViKHRleHQsIDEsIDQpID09IChwcmVmaXggLi4gInBsciIpIHRoZW4KCQkJCWZvciBpLHYgaW4gcGFpcnMocGxheWVybGlzdCkgZG8KCQkJCQlpZiBzdHJpbmcuZmluZChzdHJpbmcubG93ZXIodiksc3RyaW5nLnN1Yih0ZXh0LCA2KSkgdGhlbgoJCQkJCQl0YWJsZS5yZW1vdmUocGxheWVybGlzdCxpKQoJCQkJCQljb21tYW5kQm94T3V0cHV0LlRleHQgPSAiUmVtb3ZlZCAiIC4uIHRvc3RyaW5nKHYpIC4uICIgZnJvbSB0aGUgcGxheWVyIGxpc3QhIgoJCQkJCWVsc2UKCQkJCQkJY29tbWFuZEJveE91dHB1dC5UZXh0ID0gIkRpZG4ndCBmaW5kIGEgbWF0Y2hpbmcgdXNlciBpbiB0aGUgcGxheWVyIGxpc3QhIgoJCQkJCWVuZAoJCQkJZW5kCiAgICAgICAgICAgIGVuZAoKCQkJd2FpdCgxLjUpCgkJCWlmIHRhcmdldCB+PSBwbGF5ZXIuTmFtZSB0aGVuCgkJCQljb21tYW5kQm94T3V0cHV0LlRleHQgPSAiUGxheWVyIGxpc3QgfCAiIC4uIHRhcmdldAoJCQllbHNlCgkJCQljb21tYW5kQm94T3V0cHV0LlRleHQgPSAiUGxheWVyIGxpc3QgfCAoTm9uZSkiCgkJCWVuZAoJCWVsc2UKCQkJbG9jYWwgbWF0Y2hlcyA9IGZpbmRQbGF5ZXIodGV4dCkKCgkJCWlmICNtYXRjaGVzID09IDEgdGhlbgoJCQkJaWYgbWF0Y2hlc1sxXSA9PSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuTmFtZSB0aGVuCgkJCQkJY29tbWFuZEJveE91dHB1dC5UZXh0ID0gIllvdSBjYW4ndCBhZGQgeW91cnNlbGYgdG8gdGhlIGxpc3QhIgoJCQkJCXdhaXQoMS41KQoJCQkJZWxzZQoJCQkJCXRhYmxlLmluc2VydChwbGF5ZXJsaXN0LCBtYXRjaGVzWzFdKQoJCQkJZW5kCgkJCWVsc2VpZiAjbWF0Y2hlcyA9PSAwIHRoZW4KCQkJCWNvbW1hbmRCb3hPdXRwdXQuVGV4dCA9ICJJbnZhbGlkIHVzZXJuYW1lISBUeXBlIHRoZWlyIG5hbWUgYWdhaW4uIgoJCQkJd2FpdCgxLjUpCgkJCWVsc2UKCQkJCWNvbW1hbmRCb3hPdXRwdXQuVGV4dCA9ICJNdWx0aXBsZSB1c2VycyBmb3VuZCEgVHJ5IGFnYWluLCBwbGVhc2UhIgoJCQkJd2FpdCgxLjUpCgkJCWVuZAoJCWVuZAoKCQlpZiAjcGxheWVybGlzdCA9PSAwIHRoZW4KCQkJY29tbWFuZEJveE91dHB1dC5UZXh0ID0gIlBsYXllciBsaXN0IHwgKE5vbmUpIgoJCWVsc2UKCQkJbG9jYWwgc1NldCA9ICIiCgoJCQlmb3IgaSwgdiBpbiBuZXh0LCBwbGF5ZXJsaXN0IGRvCgkJCQlpZiBpID4gMSB0aGVuCgkJCQkJc1NldCA9IHNTZXQgLi4gIiwgIgoJCQkJZW5kCgoJCQkJc1NldCA9IHNTZXQgLi4gdgoJCQllbmQKCgkJCWNvbW1hbmRCb3hPdXRwdXQuVGV4dCA9ICJQbGF5ZXIgbGlzdCB8ICIgLi4gc1NldAoJCWVuZAoJZW5kCgoJcGxheWVycy5QbGF5ZXJSZW1vdmluZzpjb25uZWN0KGZ1bmN0aW9uKHBsYXllcikKCQlmb3IgaSwgdiBpbiBuZXh0LCBwbGF5ZXJsaXN0IGRvCgkJCWlmIHYgPT0gcGxheWVyLk5hbWUgdGhlbgoJCQkJdGFibGUucmVtb3ZlKHBsYXllcmxpc3QsIGkpCgkJCWVuZAoJCWVuZAoJCgkJaWYgI3BsYXllcmxpc3QgPT0gMCB0aGVuCgkJCWNvbW1hbmRCb3hPdXRwdXQuVGV4dCA9ICJQbGF5ZXIgbGlzdCB8IChOb25lKSIKCQllbHNlCgkJCWxvY2FsIHNTZXQgPSAiIgoJCgkJCWZvciBpLCB2IGluIG5leHQsIHBsYXllcmxpc3QgZG8KCQkJCWlmIGkgPiAxIHRoZW4KCQkJCQlzU2V0ID0gc1NldCAuLiAiLCAiCgkJCQllbmQKCQoJCQkJc1NldCA9IHNTZXQgLi4gdgoJCQllbmQKCQoJCQljb21tYW5kQm94T3V0cHV0LlRleHQgPSAiUGxheWVyIGxpc3QgfCAiIC4uIHNTZXQKCQllbmQKCWVuZCkKCgljb21tYW5kQm94LkZvY3VzTG9zdDpDb25uZWN0KGZ1bmN0aW9uKGVudGVyUHJlc3NlZCkKCQlpZiBlbnRlclByZXNzZWQgdGhlbgoJCQlpZiBjb21tYW5kQm94LlRleHQgfj0gIiIgdGhlbgoJCQkJaW5wdXRCb3goKQoJCQllbmQKCQllbmQKCWVuZCkKCgljb3JvdXRpbmUucmVzdW1lKGNvcm91dGluZS5jcmVhdGUoZnVuY3Rpb24oKQoJCW1haW5mcmFtZS5DYW52YXNTaXplID0gVURpbTIubmV3KDAsIDAsIDAsIChtYXRoLmNlaWwoI2J1dHRvbnMgKiAzNykgLyAyKSAtIDcpCgllbmQpKQoKCWxvY2FsIFVJUyA9IGdhbWU6R2V0U2VydmljZSgiVXNlcklucHV0U2VydmljZSIpCglsb2NhbCB0ZXJtaW5hdGV1aXMgPSBmYWxzZQoKCVVJUy5JbnB1dEJlZ2FuOmNvbm5lY3QoZnVuY3Rpb24oaW5wdXQsIGdwKQoJCWlmIG5vdCB0ZXJtaW5hdGV1aXMgdGhlbgoJCQlpZiBub3QgZ3AgdGhlbgoJCQkJbG9jYWwgdGFyZ2V0Q2hyID0gZ2FtZS5QbGF5ZXJzW3RhcmdldF0uQ2hhcmFjdGVyCgoJCQkJaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuQmFja1NsYXNoIHRoZW4KCQkJCQljb21tYW5kQm94OkNhcHR1cmVGb2N1cygpCgkJCQkJd2FpdCgpCgkJCQkJaWYgc3RyaW5nLnN1Yihjb21tYW5kQm94LlRleHQsIHN0cmluZy5sZW4oY29tbWFuZEJveC5UZXh0KSwgc3RyaW5nLmxlbihjb21tYW5kQm94LlRleHQpKSA9PSAiXFwiIHRoZW4KCQkJCQkJY29tbWFuZEJveC5UZXh0ID0gc3RyaW5nLnN1Yihjb21tYW5kQm94LlRleHQsIDEsIHN0cmluZy5sZW4oY29tbWFuZEJveC5UZXh0KSAtIDEpCgkJCQkJZW5kCgkJCQllbHNlaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuQiB0aGVuCgkJCQkJdG9nZ2xlRVNQKCkKCQkJCWVsc2VpZiAoaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuTSkgb3IgKGlucHV0LktleUNvZGUgPT0gRW51bS5LZXlDb2RlLk4pIHRoZW4KCQkJCQlpZiBDaGFuZ2VWaWV3RW5hYmxlZCB0aGVuCgkJCQkJCVZpZXdDaGFuZ2VGdW5jKGlucHV0LktleUNvZGUpCgkJCQkJZW5kCgkJCQllbHNlaWYgaW5wdXQuS2V5Q29kZSA9PSBFbnVtLktleUNvZGUuTGVmdEJyYWNrZXQgdGhlbgoJCQkJCWlmIG5vdCBjbG9zZWRmb3JldmVyIHRoZW4KCQkJCQkJaWYgbm90IGJ1dHRvbnNkZWJvdW5jZSB0aGVuCgkJCQkJCQlidXR0b25zZGVib3VuY2UgPSB0cnVlCgkJCQkJCQlpZiBidXR0b25zb3BlbmVkID09IGZhbHNlIHRoZW4KCQkJCQkJCQlidXR0b25zb3BlbmVkID0gdHJ1ZQoJCQkJCQkJCWJ1dHRvbnNtYWluOlR3ZWVuUG9zaXRpb24oCgkJCQkJCQkJCVVEaW0yLm5ldygxLCAwLCAwLjY1LCAwKSwKCQkJCQkJCQkJIk91dCIsCgkJCQkJCQkJCSJTaW5lIiwKCQkJCQkJCQkJLjUsCgkJCQkJCQkJCXRydWUKCQkJCQkJCQkpCgkJCQkJCQllbHNlCgkJCQkJCQkJYnV0dG9uc29wZW5lZCA9IGZhbHNlCgkJCQkJCQkJYnV0dG9uc21haW46VHdlZW5Qb3NpdGlvbigKCQkJCQkJCQkJVURpbTIubmV3KDEuMjUsIDAsIDAuNjUsIDApLAoJCQkJCQkJCQkiSW4iLAoJCQkJCQkJCQkiU2luZSIsCgkJCQkJCQkJCS41LAoJCQkJCQkJCQl0cnVlCgkJCQkJCQkJKQoJCQkJCQkJZW5kCgkJCQkJCQl3YWl0KDEpCgkJCQkJCQlidXR0b25zZGVib3VuY2UgPSBmYWxzZQoJCQkJCQllbmQKCQkJCQllbmQKCQkJCWVsc2VpZiBpbnB1dC5LZXlDb2RlID09IEVudW0uS2V5Q29kZS5SaWdodEJyYWNrZXQgdGhlbgoJCQkJCWNvbW1hbmRkZWJvdW5jZSA9IHRydWUKCQkJCQlpZiBjb21tYW5kc29wZW5lZCA9PSBmYWxzZSB0aGVuCgkJCQkJCWNvbW1hbmRzb3BlbmVkID0gdHJ1ZQoJCQkJCQljb21tYW5kc21haW46VHdlZW5Qb3NpdGlvbigKCQkJCQkJCVVEaW0yLm5ldygxLCAwLCAwLjQ1LCAwKSwKCQkJCQkJCSJPdXQiLAoJCQkJCQkJIlNpbmUiLAoJCQkJCQkJLjUsCgkJCQkJCQl0cnVlCgkJCQkJCSkKCQkJCQllbHNlCgkJCQkJCWNvbW1hbmRzb3BlbmVkID0gZmFsc2UKCQkJCQkJY29tbWFuZHNtYWluOlR3ZWVuUG9zaXRpb24oCgkJCQkJCQlVRGltMi5uZXcoMS4yNSwgMCwgMC40NSwgMCksCgkJCQkJCQkiSW4iLAoJCQkJCQkJIlNpbmUiLAoJCQkJCQkJLjUsCgkJCQkJCQl0cnVlCgkJCQkJCSkKCQkJCQllbmQKCQkJCQl3YWl0KDEpCgkJCQkJY29tbWFuZGRlYm91bmNlID0gZmFsc2UKCQkJCWVsc2VpZiBVSVM6SXNLZXlEb3duKEVudW0uS2V5Q29kZS5MZWZ0KSBhbmQgVUlTOklzS2V5RG93bihFbnVtLktleUNvZGUuUmlnaHQpIHRoZW4KCQkJCQljb21tYW5kQm94T3V0cHV0LlRleHQgPSAiVGhhbmtzIGZvciB1c2luZyBWaWRVSSEiCgkJCQkJd2FpdCgyKQoJCQkJCWlmIGJ1dHRvbnNvcGVuZWQgPT0gdHJ1ZSB0aGVuCgkJCQkJCXRlcm1pbmF0ZXVpcyA9IHRydWUKCQkJCQkJdGVybUVCR3VpKCkKCQkJCQllbmQKCQkJCWVuZAoJCQllbmQKCQllbmQKCWVuZCkKCgktLSBTY3JpcHRzIGFuZCBGdW5jdGlvbnMgRU5ECgoJLS0gRW50cmFuY2UgQW5pbWF0aW9uCgoJd2FpdCgwLjUpCgoJYnV0dG9uc21haW46VHdlZW5Qb3NpdGlvbigKCQlVRGltMi5uZXcoMSwgMCwgMC42NSwgMCksCgkJIk91dCIsCgkJIlNpbmUiLAoJCS41LAoJCXRydWUKCSkKCgljb21tYW5kc21haW46VHdlZW5Qb3NpdGlvbigKCQlVRGltMi5uZXcoMSwgMCwgMC40NSwgMCksCgkJIk91dCIsCgkJIlNpbmUiLAoJCS41LAoJCXRydWUKCSkKCgktLSBJbmZvCgoJcHJpbnQoW1sKCgldXSkKCXdhcm4oIkdVSSBzdWNjZXNzZnVsbHkgbG9hZGVkISIpCgljb21tYW5kQm94T3V0cHV0LlRleHQgPSAiV2VsY29tZSB0byBWaWRVSSEiCgl3YWl0KDIpCgljb21tYW5kQm94T3V0cHV0LlRleHQgPSAiUGxheWVyIGxpc3QgfCAoTm9uZSkiCmVuZA=="